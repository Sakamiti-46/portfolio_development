★「結局、そこに何の値が入ってるの？」を確かめること
★ログの見方
★「話が早い」のは、常に考え続けていたから。


【残りのタスク】
＜メーラー＞
Gアカウントの二段階認証行う
開発環境でのテスト
開発環境でのテストが終わったら、production環境でも動くように設定
→(7. HerokuのアドオンSendGridを追加参照)[https://qiita.com/taKassi/items/c269172dda4a8aff8522]

＜SCSS＞
修正する（indexのtable, show, edit）

＜show画面＞
Table形式でpractice_item,practice_timeを配置させる

【その他】
最初はHTML/CSS/jQuery
→Vue.js
転職後、本格的に

エンジニア界隈は専門用語が多い。
エンジニアでない人にいかにイメージして説明できるか？

includes：あるモデルのレコードを取ってくるが、indludesでoutputなど一緒に取ってきたいモデルがある

本来：Recordモデル取得→そのレコードを基に、それぞれのレコードに紐づく他のモデルのレコードを取得する

1個1個のレコードrecord_id を基に、outputのrecord_idと一致するものを探す

Recordモデルから（格納されている）recordを全部取得する
その後に、Outputモデルから（格納されている）（”record_idに紐付けられた”）outputを全部取得する

これをやろうとすると、最低、（Record側から見て）N回＋（最低）1回以上取り出す処理をしないと取得できない
→N ＋1

DBに問い合わせる数が多いと、DBも負荷が大きくなるし問い合わせるのも時間かかるしパフォが落ちる

あるURLに、みんなが

M（N ＋1）問題
M = access_user
N = number（個数）

1+N
→1個アクセスする。N回数分DBからDataを取得しなきゃいかんよね

”パスを通す”
→linux系

terminal上で、あるコマンドを叩くと、記載されているタスクが実行される

show.html.slim
フォームを非表示にする
追加・削除のボタンはなし。

edit.html.slim
すでに登録された内容をフォームで表示させる
ボタンを押してupdateアクションを行い、index.html.slimに戻る


【メモ】
gem gon
Rubyで定義した変数をJSでも使えるようにするgem
方法
Controllerにて定義する
例
  def show
  @user = User.find(params[:id])
  gon.user = @user
  end
任意の変数名の先頭に”gon.”をつけるだけ。
JSには、そのまま使ってよし。

window.alert(`hello,${gon.user.name}!`);
Ref.https://makolog.xyz/gem/


フルスタックエンジニアを希望する理由を説明できるように




to_a= to arry（配列）
to_i= to integer（数字）
to_s= to string（文字列）
to_h= to hash（ハッシュ）

gon.data（Active Record）を、XXに変換

#<ActiveRecord::Associations::CollectionProxy [#<Practice id: 89, practice_item: "フットワーク", practice_time: 10, record_id: 63, created_at: "2020-06-15 10:10:21", updated_at: "2020-06-15 10:10:21">]>

DBから検索してきた戻り値＝Avtive Recordオブジェクト
DBから簡易的にデータを引っ張ってくる仕組み

gon.data.to_a << rand(100.0)
について、

<<　メソッドは、新しい要素に「配列」を組み込む必要がある
よって、to_aが必要だよと。
（詳細はスクショの写真にて）


イメージ



  def aggregate_result
    @record = current_user.records
    gon.data = Record.where(params[:practice_time])
    logger.info "practice_time #{params[:practice_time]}"
    logger.info "gon.data #{gon.data.inspect}"
    6.times do
      gon.data.to_a << rand(100.0)
    end
  end

TestModel.group(:user_id).sum(:score)

groupメソッド
特定のカラムに登録しているレコードに対し、特定の種類ごとに棲み分けする処理


  def aggregate_result
    @record = current_user.records
    gon.data = @record.practices.group(:practice_time)
    gon.data2 = @record.practices.where(practice_item: "サーブ練習").or(practice_item: "フットワーク").or(practice_item: "3球目攻撃")or(practice_item: "台上処理")or(practice_item: "多球練習")or(practice_item: "オール")
    logger.info "practice_time #{params[:practice_time]}"
    logger.info "gon.data #{gon.data.inspect}"
    6.times do
      gon.data.to_a << rand(100.0)
    end
  end

#{}では、Rubyのコードを書く

.inspect:

  def aggregate_result
    @record = current_user.records
    gon.data = @record.practices.group(:practice_item)
    gon.data2 = @record.practices.where(practice_item: "サーブ練習")
    logger.info "practices.group #{gon.data}"
    logger.info "practices.group #{gon.data2}"
    logger.info "practices.group #{gon.data.inspect}"
    logger.info "practices.group #{gon.data2.inspect}"


★面接対策★
Ruby、Railsなど開発言語、フレームワーク を使ったのか？

なぜ、IT業界の中のエンジニアになりたいのか？が1番聞かれるし深堀りして考えないといけない

【レッスンメモ】
1.Chart.jsの実装
2.Ajaxをどう実装させるか？
3.Herokuへのデプロイ・本番環境と何か変わることがある？
4.Bootstrapなどの見た目の修正

SESの場合、運の要素あり。
受託オンリー。中身選んで経験積むと割り切って入る。

面接したところにはメール送る。
IT業界で転職する人にはそういうことをしない人多め。

公務員→民間（IT企業）→エンジニア
受託オンリー（フロントエンドの会社、自社サービス（リリース前）＆受託メイン：Webアプリのフロント部分、Web制作、1本だけ、自社サービスはVue.js、受託はjQuery、Vue.jsが出たばかりかな、という時。）
WB使って問題を解く。DB設計してという問題、エレベーターを創りたいが状態遷移図。




【レッスンメモ】
Vue.jsだと生のJSを打つため役に立つよ
情報収集→「こうすれば実装できるのでは（仮説）→実装してみる→ダメなら仮説立て直す→実装→繰り返し

★見た目の調整★
scssで個別に記述すること
@import bootstrap(application.js)の下にrecords.scssなどと記述する

★注意点★
    <%= stylesheet_link_tag    'application', media: 'all'%>
    <%= javascript_include_tag 'application' %>

「CSSが反映されない」という問題に直面する
→layoutsが正しく設定されているかも確認しよう。

Vue.js,Reactは、SPAに適したJSライブラリ
SPA：画面遷移せずデータを後ろから撮ってきて変更された部分だけ差し替えるような創り
remote:true
→非同期通信を行うオプションなのだが、、、

まず、普通に記述したら「HTMLを返す」仕様になっている。
非同期通信するには、「JSON形式を返す」仕様になるよう、実装する必要がある。

S3：画像・ファイルを保管できるストレージ
→何万枚もの画像をファイルに直して、あるループで分類して手元でフォルダーごとに分ける。
→それをクライアントに送る

分解：
①AWSから手元に置く
②そのファイルがどこに分類されるかループ処理（このルールにあってるのか？そうでないか？）する
③フォルダーの名前を付け直して1つにまとめて送る
「こうすれば〜〜できるんじゃないか？」

管理者かどうかを判別するカラムをUserに追加するイメージ
User
→e-mailなど
→adminを新しく設定する
→ログイン

【レッスン】
ページネーション（kaminari）
登録画面の見た目調整（bootstrap）
詳細画面の見た目調整（bootstrap）
詳細画面と同じ見た目で編集画面の見た目調整
※ここにAjaxを活用

【残り実装するもの】
登録画面の見た目調整
詳細画面の見た目調整
詳細画面と同じ見た目で編集画面の見た目調整
※ここにAjaxを活用
管理者権限機能←いる？
index画面の「総練習時間」を、登録した練習時間の合計を表示させる
index画面からの検索機能（ransack）
index含め背景画面の実装
レポート表示（DBから値を取り出しchart.jsで表示）
cronによる日時指定のメール送信
→Heroku上でcronを動かすところまでかな。メールを送信するための処理を作る。それをうまく動かせるか。メール送信は、Rails。cronは「この時間になったら処理Xを動かして」。
→「11時になったらRailsのXを動かして」

一般論では、転職活動が厳しい環境

